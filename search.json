[{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement davison.jack.jd@gmail.com. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://jack-davison.github.io/ggopenair/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.1, available https://www.contributor-covenant.org/version/2/1/code_of_conduct.html. Community Impact Guidelines inspired [Mozilla’s code conduct enforcement ladder][https://github.com/mozilla/inclusion]. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://jack-davison.github.io/ggopenair/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-polar.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Polar Analysis","text":"openair polar plot looks like :  achieve result ggopenair one write:  long winded, flexibility allows users customise outputs closely. example:","code":"openair::polarPlot(ggopenair::marylebone) library(ggopenair) library(ggplot2)  polar_plot(marylebone, \"nox\") +   theme_polar() +   scale_opencolours_c()"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-polar.html","id":"scales","dir":"Articles","previous_headings":"","what":"Scales","title":"Polar Analysis","text":"Use ggplot2 scale function change plot behaves. example, use scale_color_binned() bin colour bar.  Alternatively, one use “trans” argument shift colour scale. particularly useful polar_freq(), “trans” argument openair.","code":"polar_plot(marylebone, \"nox\") +   theme_polar() +   scale_color_steps(     low = \"black\",     high = \"goldenrod\",     breaks = seq(0, 1000, 40)   ) shift_axis <- function(trans) {   polar_freq(marylebone, \"nox\") +     theme_polar() +     scale_fill_gradientn(       colours = c(\"darkgreen\", \"hotpink\"),       trans = trans     ) +     labs(title = trans) }  patchwork::wrap_plots(   shift_axis(\"identity\"),   shift_axis(\"sqrt\"),   shift_axis(\"log10\") )"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-polar.html","id":"annotations","dir":"Articles","previous_headings":"","what":"Annotations","title":"Polar Analysis","text":"Use annotate() easily draw polar plots draw attention certain aspects. -built annotation functions make easy , example, draw highlighting wedge direct axis labels.","code":"polar_plot(marylebone, \"nox\") +   theme_polar() +   scale_opencolours_c(\"inferno\") +   annotate_polar_wedge(\"S\", \"W\") +   annotate_polar_axis(seq(5, 15, 5), color = \"grey50\")"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-polar.html","id":"extensions","dir":"Articles","previous_headings":"","what":"Extensions","title":"Polar Analysis","text":"Use ggplot2 extension packages , patchwork. example, polar plot inserted time variation plot.","code":"library(patchwork)  polar <-   polar_plot(marylebone, \"nox\") +   theme_polar() +   theme(panel.border = element_rect(fill = NA, color = \"black\")) +   scale_opencolours_c()  tv <- trend_variation(marylebone, \"nox\", return = \"list\") tv <-   purrr::map(     tv,     ~ .x + theme_classic() + theme(       legend.position = \"none\",       panel.border = element_rect(fill = NA)     )   )  tv$day_hour / (tv$month | tv$day | polar) +   plot_layout(heights = c(.8, 1), guides = \"collect\")"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-polar.html","id":"other-polar-plots","dir":"Articles","previous_headings":"","what":"Other Polar Plots","title":"Polar Analysis","text":"Currently main eight openair polar plots implemented ggopenair.  Note rose_wind(), rose_pollution(), polar_diff() polar_cluster() developed, function development version openair.","code":"polarplot <-   polar_plot(marylebone, \"nox\") + theme_polar() + scale_opencolours_c() polarannulus <-   polar_annulus(marylebone, \"nox\") + theme_polar() + scale_opencolours_c() polarfreq <-   polar_freq(marylebone, \"nox\") + theme_polar() + scale_opencolours_c(trans = \"sqrt\") polarperc <-   rose_percentile(marylebone, \"nox\") + theme_polar() + scale_color_manual(values = openair::openColours(n = 5)) #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in #> dplyr 1.1.0. #> ℹ Please use `reframe()` instead. #> ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()` #>   always returns an ungrouped data frame and adjust accordingly. #> ℹ The deprecated feature was likely used in the openair package. #>   Please report the issue at <https://github.com/davidcarslaw/openair/issues>. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. # pollrose <- #   rose_pollution(marylebone, \"nox\") + theme_polar(panel_ontop = FALSE) + scale_fill_manual(values = rev(openair::openColours(n = 7))) # rose_wind <- #   rose_wind(marylebone) + theme_polar(panel_ontop = FALSE) + scale_fill_manual(values = rev(openair::openColours(n = 4)))  wrap_plots(polarplot, polarannulus, polarfreq, polarperc)"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-trends.html","id":"time-plots","dir":"Articles","previous_headings":"","what":"Time Plots","title":"Time Series and Trends","text":"Unlike openair, ggopenair dedicated time_plot() function. creating time series ggplot2 already simple. “legacy” timePlot() looks like : legacy openair time plot equivalent ggplot2 shown . lines code achieve thing, ggplot2 plot much customisable. ggopenair even contains tools help common issues. example, can add limit values using scale_y_limitval() function.  also equivalent smoothPlot() already well served geom_smooth().","code":"timePlot(marylebone, pollutant = \"nox\", avg.time = \"month\") plt <-   marylebone %>%   time_average(avg_time = \"month\") %>%   ggplot(aes(x = date, y = nox)) +   geom_line() +   theme_bw() +   labs(x = NULL, y = quickText(\"nox\")) #> Warning: Returning more (or less) than 1 row per `summarise()` group was deprecated in #> dplyr 1.1.0. #> ℹ Please use `reframe()` instead. #> ℹ When switching from `summarise()` to `reframe()`, remember that `reframe()` #>   always returns an ungrouped data frame and adjust accordingly. #> ℹ The deprecated feature was likely used in the ggopenair package. #>   Please report the issue to the authors. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. plt +   scale_y_limitval(c(150, 350), \"red\", c(\"Getting\\nHigher\", \"Too high!\"), c(2, 1)) plt + geom_smooth() #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-trends.html","id":"temporal-variations","dir":"Articles","previous_headings":"","what":"Temporal Variations","title":"Time Series and Trends","text":"trend_variation() works much way timeVariation(), returns patchwork assemblage. can treated similarly ggplot2 object, ampersand (&) symbol used style plots together.  return argument can used obtain specific panels. useful panels meaninful data, want customise individual panels.","code":"trend_variation(marylebone, c(\"no2\", \"pm2.5\"), normalise = TRUE) &   theme_bw() &   scale_fill_discrete(     aesthetics = c(\"colour\", \"fill\"),     labels = scales::label_parse()(c(\"NO[2]\", \"PM[2.5]\"))   ) hour_panel <- trend_variation(marylebone, \"o3\", return = \"hour\")  avg <- mean(hour_panel$data$Mean)  hour_panel +   theme_classic() +   scale_color_manual(values = \"hotpink\", aesthetics = c(\"colour\", \"fill\")) +   scale_y_limitval(marker_values = avg, marker_labels = paste0(\"Mean (\", round(avg, 2), \")\")) +   theme(legend.position = \"none\")"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-trends.html","id":"time-proportion-plots","dir":"Articles","previous_headings":"","what":"Time Proportion Plots","title":"Time Series and Trends","text":"trend_prop() behaves almost identically timeProp(), albeit fewer arguments can controlled using labs(), scales_*_*(), .  proportion behaves similarly facet (type original openair). column isn’t present data set (numeric), use openair::cutdata() parse work can used cut data. recommendation, however, get categories order use proportion — full control understanding output. example, plot, use cut_wd() pre-cut wind directions bins — case, fewer bins setting resolution “low”.","code":"marylebone %>%   filter(format(date, \"%Y\") == 2019) %>%   trend_prop(     pollutant = \"pm10\",     avg_time = \"3 day\",     proportion = \"wd\"   ) +   theme_bw() +   scale_fill_brewer(palette = \"Dark2\") #> Warning: 432 missing wind direction line(s) removed marylebone %>%   mutate(wd = cut_wd(wd, \"low\")) %>%   filter(     format(date, \"%Y\") == 2019,     !is.na(wd)   ) %>%   trend_prop(     pollutant = \"pm10\",     avg_time = \"3 day\",     proportion = \"wd\"   ) +   theme_bw() +   scale_fill_brewer(palette = \"Dark2\")"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-trends.html","id":"trend-heat-maps","dir":"Articles","previous_headings":"","what":"Trend Heat Maps","title":"Time Series and Trends","text":"Much like time proportion plots, trend_level() similar trendLevel().  minor exception , possible, axes automatically parsed numeric/integer rather always factors. avoids label overlap, allows users use continuous scales transformations annotations. example, day split four, 6-hour segments.","code":"plt <-   trend_level(marylebone, \"nox\", \"hour\", \"month\", \"year\") +   scale_opencolours_c() +   theme_minimal() +   labs(fill = quickText(\"Mean NOx\"), y = NULL)  plt plt +   scale_x_continuous(breaks = seq(0, 24, 6)) +   geom_vline(xintercept = c(6, 12, 18))"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-trends.html","id":"calendar-plots","dir":"Articles","previous_headings":"","what":"Calendar Plots","title":"Time Series and Trends","text":"Calendar plots behave similarly, annotations dealt using bespoke functions. make easier customise layer annotations top one another.  extra feature trend_calendar() multiple years can now easily plotted. Instead normal calendar, year-month matrix produced.","code":"marylebone |>   openair::selectByDate(year = 2019) |>   trend_calendar(\"nox\") +   annotate_calendar_text(\"date\") +   annotate_calendar_wd(colour = \"black\") +   scale_opencolours_c() library(scales) marylebone |>   trend_calendar(\"nox\") +   scale_opencolours_c(limits = c(0, 600), oob = squish)"},{"path":"https://jack-davison.github.io/ggopenair/articles/ggopenair-trends.html","id":"theilsen","dir":"Articles","previous_headings":"","what":"TheilSen","title":"Time Series and Trends","text":"currently version theilSen ggopenair. open discussion, either take form openair-like function (e.g., trend_theilsen()) ggplot2-esque geom_theil(). functionality developed, feel free use openair::theilSen(), optionally re-plotting ggplot2 desired.","code":""},{"path":"https://jack-davison.github.io/ggopenair/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jack Davison. Maintainer, author. David Carslaw. Author.","code":""},{"path":"https://jack-davison.github.io/ggopenair/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carslaw, D. C. K. Ropkins, (2012) openair --- R package air quality data analysis.  Environmental Modelling & Software. Volume 27-28, 52-61.","code":"@Article{,   title = {openair --- An R package for air quality data analysis},   author = {David C. Carslaw and Karl Ropkins},   journal = {Environmental Modelling & Software},   volume = {27--28},   number = {0},   pages = {52--61},   year = {2012},   issn = {1364-8152},   doi = {10.1016/j.envsoft.2011.09.008}, }"},{"path":"https://jack-davison.github.io/ggopenair/index.html","id":"ggopenair-open-source-air-quality-data-analysis-using-ggplot2-","dir":"","previous_headings":"","what":"Air Pollution Data Visualisation using ggplot2","title":"Air Pollution Data Visualisation using ggplot2","text":"goal ggopenair bridge gap data analysis functions openair flexibility ggplot2. One key strengths ggplot2 lattice allows plots manipulated created, allows much flexible plotting experience. Unlike lattice, ggplot2 also actively developed extended, ggopenair can take advantage .","code":""},{"path":"https://jack-davison.github.io/ggopenair/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Air Pollution Data Visualisation using ggplot2","text":"can install development version ggopenair GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"jack-davison/ggopenair\")"},{"path":"https://jack-davison.github.io/ggopenair/index.html","id":"preview","dir":"","previous_headings":"","what":"Preview","title":"Air Pollution Data Visualisation using ggplot2","text":"thorough overview ggopenair can found package website: https://jack-davison.github.io/ggopenair/.","code":""},{"path":"https://jack-davison.github.io/ggopenair/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Air Pollution Data Visualisation using ggplot2","text":"Please note ggopenair project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_calendar_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a Calendar Plot with Text — annotate_calendar_text","title":"Annotate a Calendar Plot with Text — annotate_calendar_text","text":"function add text trend_calendar() plot, can either day month (like ordinary calendar) pollutant concentration.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_calendar_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a Calendar Plot with Text — annotate_calendar_text","text":"","code":"annotate_calendar_text(   type = \"date\",   colour = \"black\",   na_colour = \"grey70\",   size = 3,   digits = 0,   ... )"},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_calendar_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a Calendar Plot with Text — annotate_calendar_text","text":"type type annotation added? Can one \"date\" (day month) \"value\" (pollutant concentration). colour colour annotation text. na_colour colour annotation text days outside given month. Used type = \"date\". size size annotation text. digits number decimal places used annotation text type = \"value\". ... arguments passed ggplot2::geom_text().","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_calendar_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a Calendar Plot with Wind Direction Arrows — annotate_calendar_wd","title":"Annotate a Calendar Plot with Wind Direction Arrows — annotate_calendar_wd","text":"function add wind direction arrows trend_calendar() plot, sized based wind speed. Note function can used original data contained numeric \"ws\" \"wd\" columns.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_calendar_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a Calendar Plot with Wind Direction Arrows — annotate_calendar_wd","text":"","code":"annotate_calendar_wd(size = 1, colour = \"black\", ...)"},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_calendar_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a Calendar Plot with Wind Direction Arrows — annotate_calendar_wd","text":"size maximum size arrows. colour colour arrows. ... arguments passed metR::geom_arrow().","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_axis.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a Polar Plot with Axis Labels — annotate_polar_axis","title":"Annotate a Polar Plot with Axis Labels — annotate_polar_axis","text":"wrapper around ggplot2::annotate() draws y-axis labels directly plot, optionally drops labels side. Note , owing way ggplot2::geom_col() interacts ggplot2::coord_polar(), .rose_angle argument used rose_pollution() rose_wind().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_axis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a Polar Plot with Axis Labels — annotate_polar_axis","text":"","code":"annotate_polar_axis(   breaks,   direction = \"NW\",   labels = breaks,   drop = TRUE,   ...,   .rose_angle = NULL )"},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_axis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a Polar Plot with Axis Labels — annotate_polar_axis","text":"breaks axis breaks label plot. may appropriate use seq() obtain equally spaced labels. direction angles write labels. Can expressed numerically, using cardinal direction abbreviations (\"N\", \"NNE\", \"NE\", \"ENE\", etc.). labels labels use value breaks. Defaults breaks. drop Remove y-axis labels side plot? Defaults TRUE. Note option overriden complete themes ggplot2::theme_minimal() theme_polar(). ... Arguments pass ggplot2::annotate(). .rose_angle number passed angle argument rose_pollution()/rose_wind(). required adjust wd near North/0 due way ggplot2::geom_col() interacts ggplot2::coord_polar().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_axis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate a Polar Plot with Axis Labels — annotate_polar_axis","text":"annotation added ggplot2::ggplot().","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_axis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate a Polar Plot with Axis Labels — annotate_polar_axis","text":"","code":"if (FALSE) { polar_plot(mydata, \"nox\") + annotate_polar_axis(seq(5, 25, 5)) }"},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_wedge.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a Polar Plot with a Coloured Wedge — annotate_polar_wedge","title":"Annotate a Polar Plot with a Coloured Wedge — annotate_polar_wedge","text":"wrapper around ggplot2::annotate() draws semi-transparent wedge plot continuous polar coordinates (polar_plot(), polar_annulus(), polar_freq() rose_percentile()). Note , owing way ggplot2::geom_col() interacts ggplot2::coord_polar(), .rose_angle argument used rose_pollution() rose_wind().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_wedge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a Polar Plot with a Coloured Wedge — annotate_polar_wedge","text":"","code":"annotate_polar_wedge(   start,   end,   fill = \"red\",   colour = NA,   alpha = 0.25,   ...,   .rose_angle = NULL )"},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_wedge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a Polar Plot with a Coloured Wedge — annotate_polar_wedge","text":"start angle start wedge. Can expressed numerically, using cardinal direction abbreviations (\"N\", \"NNE\", \"NE\", \"ENE\", etc.). end angle end wedge. See end details. fill fill colour wedge. Defaults \"red\". colour border colour wedge. Defaults NA, means border drawn. alpha transparency wedge. 1 totally opaque 0 completely transparent. ... Arguments pass ggplot2::annotate(). .rose_angle number passed angle argument rose_pollution()/rose_wind(). required adjust start end near North/0 due way ggplot2::geom_col() interacts ggplot2::coord_polar().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_wedge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotate a Polar Plot with a Coloured Wedge — annotate_polar_wedge","text":"annotation added ggplot2::ggplot().","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_polar_wedge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotate a Polar Plot with a Coloured Wedge — annotate_polar_wedge","text":"","code":"if (FALSE) { polar_plot(mydata, \"nox\") + annotate_polar_wedge(start = \"N\", end = \"E\") }"},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_rose_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate a wind or pollution rose with further information — annotate_rose_text","title":"Annotate a wind or pollution rose with further information — annotate_rose_text","text":"Add annotation rose_pollution() rose_wind() plot. annotation typically shows mean pollutant wind speed value, along percentage calm value.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_rose_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate a wind or pollution rose with further information — annotate_rose_text","text":"","code":"annotate_rose_text(   y,   wd = 135,   rose_angle = 30,   size = 3,   alpha = 1,   fun = \"label\",   ... )"},{"path":"https://jack-davison.github.io/ggopenair/reference/annotate_rose_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate a wind or pollution rose with further information — annotate_rose_text","text":"y Y value draw annotation. wd wind direction draw annotation. Can either numeric, 0 North 180 South, character representing cardinal direction (\"N\", \"NE\", \"E\", etc.). rose_angle number passed angle argument rose_pollution()/rose_wind(). required adjust wd due way ggplot2::geom_col() interacts ggplot2::coord_polar(). size Size annotation. alpha Alpha value annotation, 1 opaque 0 transparent. fun One \"label\" \"text\", use ggplot2::geom_label() ggplot2::geom_text(), respectively. ... arguments pass fun.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretise date-times into categories — cut_date","title":"Discretise date-times into categories — cut_date","text":"cut_date() conveniently extracts useful features vector date-time data, year, season, whether weekend, . may useful","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretise date-times into categories — cut_date","text":"","code":"cut_date(x, type, hemisphere = \"northern\")"},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discretise date-times into categories — cut_date","text":"x date(time) vector type feature extract vector. Can one \"year\", \"month\", \"hour\", \"yearmon\", \"weekday\", \"weekend\", \"season\", \"seasonyear\". hemisphere Used split data seasons. Can \"northern\" (default) \"southern\".","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discretise date-times into categories — cut_date","text":"factor vector.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discretise date-times into categories — cut_date","text":"","code":"if (FALSE) { # vector cut_date(openair::mydata$date, \"year\") # data frame dplyr::mutate(openair::mydata, year = cut_date(year)) }"},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"Discretise wind speed into sectors — cut_wd","title":"Discretise wind speed into sectors — cut_wd","text":"cut_wd() cuts numeric wind speed sectors. default, function splits wind direction 8 sectors (\"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\", \"W\", \"NW\"), can also split either 4 16.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Discretise wind speed into sectors — cut_wd","text":"","code":"cut_wd(x, resolution = \"medium\")"},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Discretise wind speed into sectors — cut_wd","text":"x numeric vector representing wind speed, 0 North. resolution character string representing number sectors split wind direction . Can `0","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Discretise wind speed into sectors — cut_wd","text":"character vector.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/cut_wd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Discretise wind speed into sectors — cut_wd","text":"","code":"if (FALSE) { # vector cut_wd(openair::mydata$wd) # data frame dplyr::mutate(openair::mydata, wd_bin = cut_wd(wd)) }"},{"path":"https://jack-davison.github.io/ggopenair/reference/ggopenair-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ggopenair: Air Pollution Data Visualisation using ggplot2 — ggopenair-package","title":"ggopenair: Air Pollution Data Visualisation using ggplot2 — ggopenair-package","text":"Recreate air quality data visualisations 'openair' using popular 'ggplot2' plotting package.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/ggopenair-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ggopenair: Air Pollution Data Visualisation using ggplot2 — ggopenair-package","text":"Maintainer: Jack Davison davison.jack.jd@gmail.com Authors: David Carslaw david.carslaw@ricardo.com","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/marylebone.html","id":null,"dir":"Reference","previous_headings":"","what":"Hourly Air Quality and Met Data for Marylebone Road, London — marylebone","title":"Hourly Air Quality and Met Data for Marylebone Road, London — marylebone","text":"marylebone contains hourly pollutant concentrations five air quality species, well modelled wind speed, wind direction air temperature. data frame appropriate structure use ggopenair, can act template users wanting use data.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/marylebone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hourly Air Quality and Met Data for Marylebone Road, London — marylebone","text":"","code":"marylebone"},{"path":"https://jack-davison.github.io/ggopenair/reference/marylebone.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Hourly Air Quality and Met Data for Marylebone Road, London — marylebone","text":"data frame 52,608 rows 9 variables: date Observation date/time stamp POSIXct time format. ws Wind speed, m/s. wd Wind direction, degrees North. air_temp Air temperature, degrees Celcius. nox, no2, o3, pm2.5, pm10 Pollutant concentrations ug/m3.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/marylebone.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Hourly Air Quality and Met Data for Marylebone Road, London — marylebone","text":"data obtained AURN site \"my1\" using openair::importAURN().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://jack-davison.github.io/ggopenair/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_annulus.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate polarAnnulus plot — polar_annulus","title":"Bivariate polarAnnulus plot — polar_annulus","text":"Typically plots concentration pollutant wind direction function time annulus. function good visualising concentrations pollutants vary wind direction time period, e.g., month, day week, etc.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_annulus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate polarAnnulus plot — polar_annulus","text":"","code":"polar_annulus(   data,   pollutant,   local_tz = NULL,   period = \"hour\",   facet = NULL,   statistic = \"mean\",   percentile = NA,   width = 1,   min_bin = 1,   exclude_missing = TRUE,   pad_date = FALSE,   force_positive = TRUE,   k = c(20, 10),   normalise = FALSE,   alpha = 1 )"},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_annulus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate polarAnnulus plot — polar_annulus","text":"data data frame containing wind direction, wind speed, pollutant concentrations. pollutant One column names identifying pollutant concentrations. multiple pollutants specified single-pollutant statistic (e.g., \"mean\"), faceted plot returned. Two pollutants must provided certain statistic options (e.g., \"Pearson\" polar_plot()). local_tz results calculated local time includes treatment daylight savings time (DST)? default consider DST issues, provided data imported without DST offset. Emissions activity tends occur local time e.g. rush hour 8 every day. clocks go forward spring, emissions effectively released atmosphere typically 1 hour earlier summertime .e. DST applies. plotting diurnal profiles, effect “smearing-” concentrations. Sometimes, useful approach express time local time. correction tends produce better-defined diurnal profiles concentration (variables) allows better comparison made emissions/activity data. set FALSE GMT used. Examples usage include local_tz   = \"Europe/London\", local_tz = \"America/New_York\". See cutData import details. period determines temporal period consider. Options “hour” (default, plot diurnal variations), “season” plot variation throughout year, “weekday” plot day week variation “trend” plot trend wind direction. facet One two faceting columns. facet determines data split plotted. facet length 1 passed ggplot2::facet_wrap(), length 2 passed ggplot2::facet_grid() first element used columns second rows. options (e.g., multiple pollutant columns) can limit number faceting columns 1. statistic statistic applied wind speed/direction bin. Can “mean” (default), “median”, “max” (maximum), “frequency”. “stdev” (standard deviation), “weighted.mean” “cpf” (Conditional Probability Function). smoothing involved, colour scale statistics provide indication overall pattern interpreted concentration units e.g. statistic =   \"weighted.mean\" bin mean multiplied bin frequency divided total frequency. many cases using polarFreq better. Setting statistic = \"weighted.mean\" can useful provides indication concentration * frequency occurrence highlight wind speed/direction conditions dominate overall mean. percentile statistic = \"percentile\" statistic =   \"cpf\" percentile used, expressed 0 100. Note percentile value calculated wind speed, wind direction ‘bins’. reason can also useful set min_bin ensure sufficient number points available estimate percentile. See quantile details percentiles calculated. width relative width annulus compared width inner white space. width = 2 makes annulus twice wide inner circle, whereas width = 0.5 makes annulus half wide inner circle. Defaults 1. min_bin minimum number points allowed wind speed/wind direction bin.  default 1. value two requires least 2 valid records bin ; bins less 2 valid records set NA. Care taken using value > 1 risk removing real data points. exclude_missing Setting option TRUE (default) removes points plot far original data. smoothing routines produce predictions points data exist .e. predict. removing points far original data produces plot clear original data lie. set FALSE missing data interpolated. pad_date type = \"trend\" (default), pad_date = TRUE pad-missing data beginning first year end last year. purpose ensure trend plot begins ends beginning end year. force_positive default TRUE. Sometimes smoothing data steep gradients possible predicted values negative. force_positive = TRUE ensures predictions remain positive. useful several reasons. First, lots missing data interpolation needed can result artifacts predictions far original data. Second, known beforehand data positive, option carries assumption prediction. likely time setting force_positive = FALSE background concentrations first subtracted resulting data legitimately negative. vast majority situations expected user need alter default option. k smoothing value supplied gam temporal wind direction components, respectively. cases e.g. trend plot less 1-year data smoothing default values may become noisy affected outliers. Choosing lower value k (say 10) may help produce better plot. normalise TRUE concentrations normalised dividing mean value. done fitting smooth surface. option particularly useful one interested patterns concentrations several pollutants different scales e.g. NOx CO. Often useful one pollutant chosen. alpha transparency plot. mainly useful overlay map.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_annulus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate polarAnnulus plot — polar_annulus","text":"well generating plot , polarAnnulus also returns object class ``openair''. object includes three main components: call, command used generate plot; data, data frame summarised information used make plot; plot, plot . retained, e.g. using output <- polarAnnulus(mydata, \"nox\"), output can used recover data, reproduce rework original plot undertake analysis. openair output can manipulated using number generic operations, including print, plot summary.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_annulus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bivariate polarAnnulus plot — polar_annulus","text":"polar_annulus() shares many properties polar_plot(). However, polar_annulus() focussed displaying information concentrations pollutant (values another variable) vary wind direction time. Plotting annulus helps reduce compression information towards centre plot. circular plot easy interpret wind direction easily understood polar rather Cartesian coordinates. inner part annulus represents earliest time outer part annulus latest time. time dimension can shown many ways including \"trend\", \"hour\" (hour day), \"season\" (month year) \"weekday\" (day week). Taking hour example, plot show concentrations vary hour day wind direction. plots can useful understanding different source influences affect location. type = \"trend\" amount smoothing vary linearly length time series, .e., certain amount smoothing per unit interval time. deliberate choice one interested subset (time) data, detail provided subset compared full data set. allows users investigate specific periods detail. Full flexibility given smoothing parameter k.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"K-means clustering of bivariate polar plots — polar_cluster","title":"K-means clustering of bivariate polar plots — polar_cluster","text":"Function identifying clusters bivariate polar plots (polarPlot()); identifying clusters original data subsequent processing.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"K-means clustering of bivariate polar plots — polar_cluster","text":"","code":"polar_cluster(   data,   pollutant,   x = \"ws\",   wd = \"wd\",   n_clusters = 6,   data_after = NA,   return = \"plot\",   ... )"},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"K-means clustering of bivariate polar plots — polar_cluster","text":"data data frame containing wind direction, wind speed, pollutant concentrations. pollutant One column names identifying pollutant concentrations. multiple pollutants specified single-pollutant statistic (e.g., \"mean\"), faceted plot returned. Two pollutants must provided certain statistic options (e.g., \"Pearson\" polar_plot()). x Name variable plot wind direction polar coordinates, default wind speed, “ws”. wd Name wind direction field. n_clusters Number clusters use. n_clusters length 1, faceted plot output showing clusters identified one n_clusters. data_after Optional. Data representing \"\" case; see polar_diff() information. return \"plot\" (default) \"data\". \"plot\" return plotted clusters visual analysis appropriate value n_clusters can selected. value chosen, \"data\" return original data frame appended cluster column use , example, trend_prop(). ... Arguments passed openair::polarPlot statistic statistic applied wind speed/direction bin. smoothing involved, colour scale statistics provide indication overall pattern interpreted concentration units e.g. statistic = \"weighted.mean\" bin mean multiplied bin frequency divided total frequency. many cases using polarFreq better. Setting statistic = \"weighted.mean\" can useful provides indication concentration * frequency occurrence highlight wind speed/direction conditions dominate overall mean.Can : “mean” (default), “median”, “max” (maximum), “frequency”. “stdev” (standard deviation), “weighted.mean”. statistic = \"nwr\" Implements Non-parametric Wind Regression approach Henry et al. (2009) uses kernel smoothers. openair implementation identical Gaussian kernels used wind direction speed. smoothing controlled ws_spread wd_spread. statistic = \"cpf\" conditional probability function (CPF) plotted single (usually high) percentile level supplied. CPF defined CPF = /ny, number samples y bin (default wind direction, wind speed interval) mixing ratios greater overall percentile concentration, ny total number samples wind sector (see Ashbaugh et al., 1985). Note percentile intervals can also considered; see percentile details. statistic = \"r\" statistic = \"Pearson\", Pearson correlation coefficient calculated two pollutants. calculation involves weighted Pearson correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. statistic = \"Spearman\", Spearman correlation coefficient calculated two pollutants. calculation involves weighted Spearman correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. \"robust_slope\" another option pair-wise statistics \"quantile.slope\", uses quantile regression estimate slope particular quantile level (see also tau setting quantile level). \"york_slope\" another option pair-wise statistics uses York regression method estimate slope. method uncertainties x y used determination slope. uncertainties provided x_error y_error --- see . exclude.missing Setting option TRUE (default) removes points plot far original data. smoothing routines produce predictions points data exist .e. predict. removing points far original data produces plot clear original data lie. set FALSE missing data interpolated. uncertainty uncertainty calculated surface shown? TRUE three plots produced scale showing predicted surface together estimated lower upper uncertainties 95% confidence interval. Calculating uncertainties useful understand whether features real .  example, high wind speeds data greater uncertainty predicted values. uncertainties calculated using GAM weighting done frequency measurements wind speed-direction bin. Note uncertainties calculated type set \"default\". percentile statistic = \"percentile\" percentile used, expressed 0 100. Note percentile value calculated wind speed, wind direction ‘bins’. reason can also useful set min.bin ensure sufficient number points available estimate percentile. See quantile details percentiles calculated. percentile also used Conditional Probability Function (CPF) plots. percentile can length two, case percentile interval considered use CPF. example, percentile = c(90, 100) plot CPF concentrations 90 100th percentiles. Percentile intervals can useful identifying specific sources. addition, percentile can also length 3. third value ‘trim’ value applied. calculating percentile intervals many can cover low values useful information. trim value ensures values greater equal trim * mean value considered percentile intervals calculated. effect extract detail many source signatures. See manual examples. Finally, trim value less zero percentile range interpreted absolute concentration values subsetting carried directly. cols Colours used plotting. Options include “default”, “increment”, “heat”, “jet” RColorBrewer colours --- see openair openColours function details. user defined user can supply list colour names recognised R (type colours() see full list). example cols = c(\"yellow\", \"green\", \"blue\"). cols can also take values \"viridis\", \"magma\", \"inferno\", \"plasma\" viridis colour maps ported Python's Matplotlib library. weights edges plot may data points wind speed-direction interval, situations distort plot concentrations high. weights applies weighting reduce influence. example default single data point exists weighting factor 0.25 two points 0.5. apply weighting use data , use weights = c(1, 1, 1). alternative -weighting points can removed altogether using min.bin. min.bin minimum number points allowed wind speed/wind direction bin.  default 1. value two requires least 2 valid records bin ; bins less 2 valid records set NA. Care taken using value > 1 risk removing real data points. recommended consider data care. Also, polarFreq function can use circumstances. force.positive default TRUE. Sometimes smoothing data steep gradients possible predicted values negative. force.positive = TRUE ensures predictions remain positive. useful several reasons. First, lots missing data interpolation needed can result artefacts predictions far original data. Second, known beforehand data positive, option carries assumption prediction. likely time setting force.positive = FALSE background concentrations first subtracted resulting data legitimately negative. vast majority situations expected user need alter default option. k smoothing parameter used gam function package mgcv. Typically, value around 100 (default) seems suitable resolve important features plot. appropriate choice k problem-dependent; extensive testing polar plots many different problems suggests value k 100 suitable. Setting k higher values tend affect surface predictions much add computation time. Lower values k increase smoothing. Sometimes data plot polarPlot fail. circumstances can worth lowering value k. normalise TRUE concentrations normalised dividing mean value. done fitting smooth surface. option particularly useful one interested patterns concentrations several pollutants different scales e.g. NOx CO. Often useful one pollutant chosen. key.footer see key.footer. key.position Location scale key plotted. Allowed arguments currently include \"top\", \"right\", \"bottom\" \"left\". ws_spread value sigma used Gaussian kernel weighting wind speed statistic = \"nwr\" correlation regression statistics used r. Default 0.5. wd_spread value sigma used Gaussian kernel weighting wind direction statistic = \"nwr\" correlation regression statistics used r. Default 4. x_error x error / uncertainty used statistic = \"york_slope\". y_error y error / uncertainty used statistic = \"york_slope\". kernel Type kernel used weighting procedure correlation regression techniques used. \"gaussian\" supported may enhanced future. tau quantile estimated statistic set \"quantile.slope\". Default 0.5 equal median ignored \"quantile.slope\" used.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_cluster.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"K-means clustering of bivariate polar plots — polar_cluster","text":"Bivariate polar plots generated using polarPlot() function provide useful graphical technique identifying characterising different air pollution sources. bivariate polar plots provide useful graphical indication potential sources, location wind-speed variable dependence, several limitations. Often, `feature' detected plot subsequent analysis data meeting particular wind speed/direction criteria based judgement investigator concerning wind speed-direction intervals interest. Furthermore, identification feature can depend choice colour scale used, making process somewhat arbitrary. polarCluster applies Partition Around Medoids (PAM) clustering techniques polarPlot() surfaces help identify potentially interesting features analysis. Details PAM can found cluster package (core R package pre-installed R systems). PAM clustering similar k-means several advantages e.g. robust outliers. clustering based equal contribution assumed u v wind components associated concentration. data standardized clustering takes place. function works best first trying different numbers clusters plotting . achieved setting n_clusters length 1. example, n_clusters = 2:10 plot output showing 9 cluster levels 2 10. clustering can also applied differences polar plot surfaces (see polarDiff()). case second data frame () supplied. Note clustering computationally intensive function can take long time run --- particularly number clusters increased. reason can good idea run clusters first get feel , e.g., n_clusters = 2:5. number clusters decided, user can run polar_cluster() return original data frame together new column cluster, gives cluster number character (see example). Note rows value pollutant NA ignored returned data frame may fewer rows original. Note automatic ways ensuring appropriate number clusters application dependent. However, often -priori information available different features polar plots correspond . Nevertheless, appropriateness different clusters best determined post-processing data. Carslaw Beevers (2012) paper discusses issues detail.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_cluster.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"K-means clustering of bivariate polar plots — polar_cluster","text":"Carslaw, D.C., Beevers, S.D, Ropkins, K M.C. Bell (2006). Detecting quantifying aircraft -airport contributions ambient nitrogen oxides vicinity large international airport.  Atmospheric Environment. 40/28 pp 5424-5434. Carslaw, D.C., & Beevers, S.D. (2013). Characterising understanding emission sources using bivariate polar plots k-means clustering. Environmental Modelling & Software, 40, 325-329. doi:10.1016/j.envsoft.2012.09.005","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_diff.html","id":null,"dir":"Reference","previous_headings":"","what":"Polar plots considering changes in concentrations between two time periods — polar_diff","title":"Polar plots considering changes in concentrations between two time periods — polar_diff","text":"function provides way showing differences concentrations two time periods polar plot. several uses function, common see source(s) may changed two periods.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_diff.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Polar plots considering changes in concentrations between two time periods — polar_diff","text":"","code":"polar_diff(data_before, data_after, pollutant, x = \"ws\", alpha = 1, ...)"},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_diff.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Polar plots considering changes in concentrations between two time periods — polar_diff","text":"data_before, data_after Data frames represent \"\" \"\" cases. See polar_plot() details different input requirements. pollutant One column names identifying pollutant concentrations. multiple pollutants specified single-pollutant statistic (e.g., \"mean\"), faceted plot returned. Two pollutants must provided certain statistic options (e.g., \"Pearson\" polar_plot()). x Name variable plot wind direction polar coordinates, default wind speed, “ws”. alpha transparency plot. mainly useful overlay map. ... Arguments passed openair::polarPlot statistic statistic applied wind speed/direction bin. smoothing involved, colour scale statistics provide indication overall pattern interpreted concentration units e.g. statistic = \"weighted.mean\" bin mean multiplied bin frequency divided total frequency. many cases using polarFreq better. Setting statistic = \"weighted.mean\" can useful provides indication concentration * frequency occurrence highlight wind speed/direction conditions dominate overall mean.Can : “mean” (default), “median”, “max” (maximum), “frequency”. “stdev” (standard deviation), “weighted.mean”. statistic = \"nwr\" Implements Non-parametric Wind Regression approach Henry et al. (2009) uses kernel smoothers. openair implementation identical Gaussian kernels used wind direction speed. smoothing controlled ws_spread wd_spread. statistic = \"cpf\" conditional probability function (CPF) plotted single (usually high) percentile level supplied. CPF defined CPF = /ny, number samples y bin (default wind direction, wind speed interval) mixing ratios greater overall percentile concentration, ny total number samples wind sector (see Ashbaugh et al., 1985). Note percentile intervals can also considered; see percentile details. statistic = \"r\" statistic = \"Pearson\", Pearson correlation coefficient calculated two pollutants. calculation involves weighted Pearson correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. statistic = \"Spearman\", Spearman correlation coefficient calculated two pollutants. calculation involves weighted Spearman correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. \"robust_slope\" another option pair-wise statistics \"quantile.slope\", uses quantile regression estimate slope particular quantile level (see also tau setting quantile level). \"york_slope\" another option pair-wise statistics uses York regression method estimate slope. method uncertainties x y used determination slope. uncertainties provided x_error y_error --- see . exclude.missing Setting option TRUE (default) removes points plot far original data. smoothing routines produce predictions points data exist .e. predict. removing points far original data produces plot clear original data lie. set FALSE missing data interpolated. uncertainty uncertainty calculated surface shown? TRUE three plots produced scale showing predicted surface together estimated lower upper uncertainties 95% confidence interval. Calculating uncertainties useful understand whether features real .  example, high wind speeds data greater uncertainty predicted values. uncertainties calculated using GAM weighting done frequency measurements wind speed-direction bin. Note uncertainties calculated type set \"default\". percentile statistic = \"percentile\" percentile used, expressed 0 100. Note percentile value calculated wind speed, wind direction ‘bins’. reason can also useful set min.bin ensure sufficient number points available estimate percentile. See quantile details percentiles calculated. percentile also used Conditional Probability Function (CPF) plots. percentile can length two, case percentile interval considered use CPF. example, percentile = c(90, 100) plot CPF concentrations 90 100th percentiles. Percentile intervals can useful identifying specific sources. addition, percentile can also length 3. third value ‘trim’ value applied. calculating percentile intervals many can cover low values useful information. trim value ensures values greater equal trim * mean value considered percentile intervals calculated. effect extract detail many source signatures. See manual examples. Finally, trim value less zero percentile range interpreted absolute concentration values subsetting carried directly. cols Colours used plotting. Options include “default”, “increment”, “heat”, “jet” RColorBrewer colours --- see openair openColours function details. user defined user can supply list colour names recognised R (type colours() see full list). example cols = c(\"yellow\", \"green\", \"blue\"). cols can also take values \"viridis\", \"magma\", \"inferno\", \"plasma\" viridis colour maps ported Python's Matplotlib library. weights edges plot may data points wind speed-direction interval, situations distort plot concentrations high. weights applies weighting reduce influence. example default single data point exists weighting factor 0.25 two points 0.5. apply weighting use data , use weights = c(1, 1, 1). alternative -weighting points can removed altogether using min.bin. min.bin minimum number points allowed wind speed/wind direction bin.  default 1. value two requires least 2 valid records bin ; bins less 2 valid records set NA. Care taken using value > 1 risk removing real data points. recommended consider data care. Also, polarFreq function can use circumstances. force.positive default TRUE. Sometimes smoothing data steep gradients possible predicted values negative. force.positive = TRUE ensures predictions remain positive. useful several reasons. First, lots missing data interpolation needed can result artefacts predictions far original data. Second, known beforehand data positive, option carries assumption prediction. likely time setting force.positive = FALSE background concentrations first subtracted resulting data legitimately negative. vast majority situations expected user need alter default option. k smoothing parameter used gam function package mgcv. Typically, value around 100 (default) seems suitable resolve important features plot. appropriate choice k problem-dependent; extensive testing polar plots many different problems suggests value k 100 suitable. Setting k higher values tend affect surface predictions much add computation time. Lower values k increase smoothing. Sometimes data plot polarPlot fail. circumstances can worth lowering value k. normalise TRUE concentrations normalised dividing mean value. done fitting smooth surface. option particularly useful one interested patterns concentrations several pollutants different scales e.g. NOx CO. Often useful one pollutant chosen. key.footer see key.footer. key.position Location scale key plotted. Allowed arguments currently include \"top\", \"right\", \"bottom\" \"left\". ws_spread value sigma used Gaussian kernel weighting wind speed statistic = \"nwr\" correlation regression statistics used r. Default 0.5. wd_spread value sigma used Gaussian kernel weighting wind direction statistic = \"nwr\" correlation regression statistics used r. Default 4. x_error x error / uncertainty used statistic = \"york_slope\". y_error y error / uncertainty used statistic = \"york_slope\". kernel Type kernel used weighting procedure correlation regression techniques used. \"gaussian\" supported may enhanced future. tau quantile estimated statistic set \"quantile.slope\". Default 0.5 equal median ignored \"quantile.slope\" used.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_diff.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Polar plots considering changes in concentrations between two time periods — polar_diff","text":"function primarily intended compare two time periods location, can used two data sets contain pollutant. example, data two sites close one another, two co-located instruments. analysis works calculating polar plot surface periods subtracting surface surface.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot wind speed/direction frequencies and other statistics — polar_freq","title":"Function to plot wind speed/direction frequencies and other statistics — polar_freq","text":"Function plot wind speed/direction frequencies statistics","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot wind speed/direction frequencies and other statistics — polar_freq","text":"","code":"polar_freq(   data,   pollutant = NULL,   statistic = \"frequency\",   ws_int = 1,   wd_nint = 36,   facet = NULL,   min_bin = 1,   border_colour = NA,   alpha = 1 )"},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot wind speed/direction frequencies and other statistics — polar_freq","text":"data data frame containing wind direction, wind speed, pollutant concentrations. pollutant column name identifying pollutant concentration. statistic statistic applied wind speed/direction bin. Can “frequency”, “mean”, “median”, “max” (maximum), “stdev” (standard deviation) “weighted.mean”. option “frequency” (default) simplest plots frequency wind speed/direction different bins. scale therefore shows counts bin. option “mean” plot mean concentration pollutant (see next point) wind speed/direction bins, .  Finally, “weighted.mean” plot concentration pollutant weighted wind speed/direction. segment therefore provides percentage overall contribution total concentration. information given examples. Note options “frequency”, necessary also provide name pollutant. See function cutData details. ws_int Wind speed interval assumed. cases e.g. low met mast, interval 0.5 may appropriate. wd_nint Number intervals wind direction. facet One two faceting columns. facet determines data split plotted. facet length 1 passed ggplot2::facet_wrap(), length 2 passed ggplot2::facet_grid() first element used columns second rows. options (e.g., multiple pollutant columns) can limit number faceting columns 1. min_bin minimum number points allowed wind speed/wind direction bin.  default 1. value two requires least 2 valid records bin ; bins less 2 valid records set NA. Care taken using value > 1 risk removing real data points. border_colour colour use border tile. Defaults NA, removes border. alpha transparency plot. mainly useful overlay map.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for plotting bivariate polar plots with smoothing. — polar_plot","title":"Function for plotting bivariate polar plots with smoothing. — polar_plot","text":"Function plotting pollutant concentration polar coordinates showing concentration wind speed (another numeric variable) direction. Mean concentrations calculated wind speed-direction ‘bins’ (e.g. 0-1, 1-2 m/s,...  0-10, 10-20 degrees etc.).  aid interpretation, gam smoothing carried using mgcv.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for plotting bivariate polar plots with smoothing. — polar_plot","text":"","code":"polar_plot(   data,   pollutant,   x = \"ws\",   wd = \"wd\",   facet = NULL,   statistic = \"mean\",   exclude_missing = TRUE,   uncertainty = FALSE,   percentile = NA,   weights = c(0.25, 0.5, 0.75),   min_bin = 1,   force_positive = TRUE,   k = 100,   normalise = FALSE,   ws_spread = 1.5,   wd_spread = 5,   x_error = NA,   y_error = NA,   kernel = \"gaussian\",   tau = 0.5,   alpha = 1 )"},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for plotting bivariate polar plots with smoothing. — polar_plot","text":"data data frame containing wind direction, wind speed, pollutant concentrations. pollutant One column names identifying pollutant concentrations. multiple pollutants specified single-pollutant statistic (e.g., \"mean\"), faceted plot returned. Two pollutants must provided certain statistic options (e.g., \"Pearson\" polar_plot()). x Name variable plot wind direction polar coordinates, default wind speed, “ws”. wd Name wind direction field. facet One two faceting columns. facet determines data split plotted. facet length 1 passed ggplot2::facet_wrap(), length 2 passed ggplot2::facet_grid() first element used columns second rows. options (e.g., multiple pollutant columns) can limit number faceting columns 1. statistic statistic applied wind speed/direction bin. Can : “mean” (default), “median”, “max” (maximum), “frequency”. “stdev” (standard deviation), “weighted.mean”. statistic = \"nwr\" Implements Non-parametric Wind Regression approach Henry et al. (2009) uses kernel smoothers. openair implementation identical Gaussian kernels used wind direction speed. smoothing controlled ws_spread wd_spread. statistic = \"cpf\" conditional probability function (CPF) plotted single (usually high) percentile level supplied. CPF defined CPF = /ny, number samples y bin (default wind direction, wind speed interval) mixing ratios greater overall percentile concentration, ny total number samples wind sector (see Ashbaugh et al., 1985). Note percentile intervals can also considered; see percentile details. statistic = \"r\" statistic = \"Pearson\", Pearson correlation coefficient calculated two pollutants. calculation involves weighted Pearson correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. statistic = \"Spearman\", Spearman correlation coefficient calculated two pollutants. calculation involves weighted Spearman correlation coefficient, weighted Gaussian kernels wind direction radial variable (default wind speed). weight assigned values close wind speed-direction interval. Kernel weighting used ensure data used rather relying potentially small number values wind speed-direction interval. \"robust_slope\" another option pair-wise statistics \"quantile.slope\", uses quantile regression estimate slope particular quantile level (see also tau setting quantile level). \"york_slope\" another option pair-wise statistics uses York regression method estimate slope. method uncertainties x y used determination slope. uncertainties provided x_error y_error --- see . exclude_missing Setting option TRUE (default) removes points plot far original data. smoothing routines produce predictions points data exist, .e., predict removing points far original data produces plot clear original data lie. set FALSE missing data interpolated. uncertainty uncertainty calculated surface shown? TRUE three plots produced scale showing predicted surface together estimated lower upper uncertainties 95% confidence interval. Calculating uncertainties useful understand whether features real .  example, high wind speeds data greater uncertainty predicted values. uncertainties calculated using GAM weighting done frequency measurements wind speed-direction bin. Note uncertainties calculated type set \"default\". percentile statistic = \"percentile\" percentile used, expressed 0 100. Note percentile value calculated wind speed, wind direction ‘bins’. reason can also useful set min_bin ensure sufficient number points available estimate percentile. See quantile details percentiles calculated. percentile also used Conditional Probability Function (CPF) plots. percentile can length two, case percentile interval considered use CPF. example, percentile = c(90, 100) plot CPF concentrations 90 100th percentiles. Percentile intervals can useful identifying specific sources. addition, percentile can also length 3. third value ‘trim’ value applied. calculating percentile intervals many can cover low values useful information. trim value ensures values greater equal trim * mean value considered percentile intervals calculated. effect extract detail many source signatures. See manual examples. Finally, trim value less zero percentile range interpreted absolute concentration values subsetting carried directly. weights edges plot may data points wind speed-direction interval, situations distort plot concentrations high. weights applies weighting reduce influence. example default single data point exists weighting factor 0.25 two points 0.5. apply weighting use data , use weights = c(1, 1, 1). alternative -weighting points can removed altogether using min_bin. min_bin minimum number points allowed wind speed/wind direction bin.  default 1. value two requires least 2 valid records bin ; bins less 2 valid records set NA. Care taken using value > 1 risk removing real data points. force_positive default TRUE. Sometimes smoothing data steep gradients possible predicted values negative. force_positive = TRUE ensures predictions remain positive. useful several reasons. First, lots missing data interpolation needed can result artifacts predictions far original data. Second, known beforehand data positive, option carries assumption prediction. likely time setting force_positive = FALSE background concentrations first subtracted resulting data legitimately negative. vast majority situations expected user need alter default option. k smoothing parameter used gam function package mgcv. Typically, value around 100 (default) seems suitable resolve important features plot. appropriate choice k problem-dependent; extensive testing polar plots many different problems suggests value k 100 suitable. Setting k higher values tend affect surface predictions much add computation time. Lower values k increase smoothing. Sometimes data plot polarPlot fail. circumstances can worth lowering value k. normalise TRUE concentrations normalised dividing mean value. done fitting smooth surface. option particularly useful one interested patterns concentrations several pollutants different scales e.g. NOx CO. Often useful one pollutant chosen. ws_spread value sigma used Gaussian kernel weighting wind speed statistic = \"nwr\" correlation regression statistics used r. Default 0.5. wd_spread value sigma used Gaussian kernel weighting wind direction statistic = \"nwr\" correlation regression statistics used r. Default 4. x_error x error / uncertainty used statistic = \"york_slope\". y_error y error / uncertainty used statistic = \"york_slope\". kernel Type kernel used weighting procedure correlation regression techniques used. \"gaussian\" supported may enhanced future. tau quantile estimated statistic set \"quantile.slope\". Default 0.5 equal median ignored \"quantile.slope\" used. alpha transparency plot. mainly useful overlay map.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for plotting bivariate polar plots with smoothing. — polar_plot","text":"ggplot2::ggplot2 figure","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function for plotting bivariate polar plots with smoothing. — polar_plot","text":"bivariate polar plot useful diagnostic tool quickly gaining idea potential sources. Wind speed one useful variables use separate source types (see references). example, ground-level concentrations resulting buoyant plumes chimney stacks tend peak higher wind speed conditions. Conversely, ground-level, non-buoyant plumes road traffic, tend highest concentrations low wind speed conditions. sources aircraft engines also show differing characteristics wind speed. function developed allow variables wind speed plotted wind direction polar coordinates. key issue variable plotted wind direction discriminating way. example, temperature can help reveal high-level sources brought ground level unstable atmospheric conditions, show effect source emission dependent temperature, e.g., biogenic isoprene. plots can vary considerably depending much smoothing done.  approach adopted based flexible capable mgcv package uses Generalized Additive Models. methods exist find optimum level smoothness, necessarily useful. principal aim polarPlot graphical analysis rather quantitative purposes. respect smoothing aims strike balance revealing interesting (real) features overly noisy data. defaults used polarPlot based analysis data many different sources. advanced users may wish modify code adopt smoothing approaches. Various statistics possible consider e.g. mean, maximum, median. statistic = \"max\" often useful revealing sources. Pair-wise statistics two pollutants can also calculated. smoothing involved, colour scale statistics provide indication overall pattern interpreted concentration units, e.g., statistic = \"weighted.mean\" bin mean multiplied bin frequency divided total frequency. many cases using polarFreq better. Setting statistic = \"weighted.mean\" can useful provides indication concentration * frequency occurrence highlight wind speed/direction conditions dominate overall mean. function can also used compare two pollutant species range pair-wise statistics (see help statistic) Grange et al. (2016) (open-access publication link ). Wind direction split 10 degree intervals variable (e.g. wind speed) 30 intervals. 2D bins used calculate statistics. plots often show interesting features higher wind speeds (see references ). conditions can measurements therefore greater uncertainty calculation surface. several ways issue can tackled. First, possible avoid smoothing altogether use polarFreq package openair. Second, effect setting minimum number measurements wind speed-direction bin can examined min_bin. possible single point high wind speed conditions can strongly affect surface prediction. Therefore, setting min_bin = 3, example, remove wind speed-direction bins fewer 3 measurements fitting surface. Third, consider setting uncertainty = TRUE. option show predicted surface together upper lower 95% confidence intervals, take account frequency measurements.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/polar_plot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Function for plotting bivariate polar plots with smoothing. — polar_plot","text":"Ashbaugh, L.L., Malm, W.C., Sadeh, W.Z., 1985. residence time probability analysis sulfur concentrations ground canyon national park. Atmospheric Environment 19 (8), 1263-1270. Carslaw, D.C., Beevers, S.D, Ropkins, K M.C. Bell (2006). Detecting quantifying aircraft -airport contributions ambient nitrogen oxides vicinity large international airport.  Atmospheric Environment. 40/28 pp 5424-5434. Carslaw, D.C., & Beevers, S.D. (2013). Characterising understanding emission sources using bivariate polar plots k-means clustering. Environmental Modelling & Software, 40, 325-329. doi:10.1016/j.envsoft.2012.09.005 Henry, R.C., Chang, Y.S., Spiegelman, C.H., 2002. Locating nearby sources air pollution nonparametric regression atmospheric concentrations wind direction. Atmospheric Environment 36 (13), 2237-2244. Henry, R., Norris, G.., Vedantham, R., Turner, J.R., 2009. Source region identification using Kernel smoothing. Environ. Sci. Technol. 43 (11), 4090e4097. http:// dx.doi.org/10.1021/es8011723. Uria-Tellaetxe, . D.C. Carslaw (2014). Source identification using conditional bivariate Probability function. Environmental Modelling & Software, Vol. 59, 1-9. Westmoreland, E.J., N. Carslaw, D.C. Carslaw, . Gillah E. Bates (2007). Analysis air quality within street canyon using statistical dispersion modelling techniques. Atmospheric Environment. Vol.  41(39), pp. 9195-9205. Yu, K.N., Cheung, Y.P., Cheung, T., Henry, R.C., 2004. Identifying impact large urban airports local air quality nonparametric regression. Atmospheric Environment 38 (27), 4501-4507. Grange, S. K., Carslaw, D. C., & Lewis, . C. 2016. Source apportionment advances bivariate polar plots, correlation, regression techniques. Atmospheric Environment. 145, 128-134. https://www.sciencedirect.com/science/article/pii/S1352231016307166","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/quick_text.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatic text formatting for ggopenair — quick_text","title":"Automatic text formatting for ggopenair — quick_text","text":"quick_text() routine formatting lookup table automatically prepares common pollutant names units parsing using ggplot2::label_parsed() similar. automatically called several ggopenair functions. Unlike openair::quickText(), quick_text() returns character vector, means output can stored data frame tibble::tibble()","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/quick_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatic text formatting for ggopenair — quick_text","text":"","code":"quick_text(text)"},{"path":"https://jack-davison.github.io/ggopenair/reference/quick_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatic text formatting for ggopenair — quick_text","text":"text character vector.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/quick_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatic text formatting for ggopenair — quick_text","text":"character vector.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_metbias.html","id":null,"dir":"Reference","previous_headings":"","what":"Bias Rose — rose_metbias","title":"Bias Rose — rose_metbias","text":"Bias Rose","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_metbias.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bias Rose — rose_metbias","text":"","code":"rose_metbias(   data,   ws = \"ws\",   wd = \"wd\",   ws2 = \"ws2\",   wd2 = \"wd2\",   angle = 10,   facet = NULL,   bias_corr = TRUE,   breaks = NA,   width = 1,   border_colour = NA,   alpha = 1 )"},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_metbias.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bias Rose — rose_metbias","text":"data data frame containing fields ws, wd, ws2 wd2. ws Name column representing wind speed. wd Name column representing wind direction. ws2 Name column representing wind speed (2). wd2 Name column representing wind direction (2). angle Angle spokes. Ideally number 360 evenly divisible (see bias_corr). facet One two faceting columns. facet determines data split plotted. facet length 1 passed ggplot2::facet_wrap(), length 2 passed ggplot2::facet_grid() first element used columns second rows. options (e.g., multiple pollutant columns) can limit number faceting columns 1. bias_corr angle divide exactly 360 bias introduced frequencies wind direction already supplied rounded nearest 10 degrees, often case. example, angle = 22.5, N, E, S, W include 3 wind sectors angles two. bias correction can made correct problem. simple method according Applequist (2012) used adjust frequencies. breaks number break points use binning data (used alongside ws_int), vector specific break points. example, breaks = 6 ws_int = 2 generates break points 2, 4, 6 & 8 m/s, whereas breaks = c(0, 1, 10, 100) breaks data four segments: <1, 1-10, 10-100, & >100. width Width bar fraction maximum width. width = 1 makes bars meet edges width = 0 makes disappear entirely. Defaults 0.9. border_colour Border colour shaded areas. Default border. alpha transparency plot. mainly useful overlay map.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_percentile.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to plot percentiles by wind direction — rose_percentile","title":"Function to plot percentiles by wind direction — rose_percentile","text":"Function plot percentiles wind direction","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_percentile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to plot percentiles by wind direction — rose_percentile","text":"","code":"rose_percentile(   data,   pollutant,   facet = NULL,   percentile = c(25, 50, 75, 90, 95),   method = \"default\",   line_lty = 1,   line_width = 1,   mean = TRUE,   mean_lty = 1,   mean_width = 1,   mean_colour = \"grey\",   alpha = 1 )"},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_percentile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to plot percentiles by wind direction — rose_percentile","text":"data data frame containing wind direction, wind speed, pollutant concentrations. pollutant One column names identifying pollutant concentrations. multiple pollutants specified single-pollutant statistic (e.g., \"mean\"), faceted plot returned. Two pollutants must provided certain statistic options (e.g., \"Pearson\" polar_plot()). facet One two faceting columns. facet determines data split plotted. facet length 1 passed ggplot2::facet_wrap(), length 2 passed ggplot2::facet_grid() first element used columns second rows. options (e.g., multiple pollutant columns) can limit number faceting columns 1. percentile percentile value(s) plot. Must 0--100. percentile = NA mean line shown. method method = \"default\" supplied percentiles wind direction calculated. method   = \"cpf\" conditional probability function (CPF) plotted single (usually high) percentile level supplied. CPF defined CPF = /ny, number samples wind sector y mixing ratios greater overall percentile concentration, ny total number samples wind sector (see Ashbaugh et al., 1985). line_lty Line type percentile lines (see ggplot2::linetype). line_width Line width percentile lines. mean Show mean wind direction line? mean_lty Line type mean line (see ggplot2::linetype). mean_width Line width mean line. mean_colour Line colour mean line. alpha transparency plot. mainly useful overlay map.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_pollution.html","id":null,"dir":"Reference","previous_headings":"","what":"Traditional wind rose plot — rose_pollution","title":"Traditional wind rose plot — rose_pollution","text":"Traditional wind rose plot","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_pollution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Traditional wind rose plot — rose_pollution","text":"","code":"rose_pollution(   data,   pollutant,   angle = 30,   facet = NULL,   bias_corr = TRUE,   breaks = 6,   normalise = FALSE,   statistic = \"prop.count\",   width = 0.9,   border_colour = NA,   alpha = 1 )"},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_pollution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Traditional wind rose plot — rose_pollution","text":"data data frame containing wind direction, wind speed, pollutant concentrations. pollutant column name identifying pollutant concentration. angle Angle spokes. Ideally number 360 evenly divisible (see bias_corr). facet One two faceting columns. facet determines data split plotted. facet length 1 passed ggplot2::facet_wrap(), length 2 passed ggplot2::facet_grid() first element used columns second rows. options (e.g., multiple pollutant columns) can limit number faceting columns 1. bias_corr angle divide exactly 360 bias introduced frequencies wind direction already supplied rounded nearest 10 degrees, often case. example, angle = 22.5, N, E, S, W include 3 wind sectors angles two. bias correction can made correct problem. simple method according Applequist (2012) used adjust frequencies. breaks number break points use binning data, vector specific break points. example, breaks = 6 split legend roughly 6 equal bins, whereas breaks = c(0, 1, 10,   100) breaks data four segments: <1, 1-10, 10-100, & >100. normalise TRUE wind direction segment normalised equal one. useful showing concentrations (parameters) contribute wind sector proprtion time wind direction low. line showing probability wind directions particular wind sector also shown. statistic statistic applied data bin plot. Options currently include “prop.count”, “prop.mean” “abs.count”. default “prop.count” sizes bins according proportion frequency measurements.  Similarly, “prop.mean” sizes bins according relative contribution mean. “abs.count” provides absolute count measurements bin. width Width bar fraction maximum width. width = 1 makes bars meet edges width = 0 makes disappear entirely. Defaults 0.9. border_colour Border colour shaded areas. Default border. alpha transparency plot. mainly useful overlay map.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_wind.html","id":null,"dir":"Reference","previous_headings":"","what":"Pollution rose variation of the traditional wind rose — rose_wind","title":"Pollution rose variation of the traditional wind rose — rose_wind","text":"Pollution rose variation traditional wind rose","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_wind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pollution rose variation of the traditional wind rose — rose_wind","text":"","code":"rose_wind(   data,   ws = \"ws\",   wd = \"wd\",   ws_int = 2,   angle = 30,   facet = NULL,   bias_corr = TRUE,   breaks = 4,   normalise = FALSE,   statistic = \"prop.count\",   width = 0.9,   border_colour = NA,   alpha = 1 )"},{"path":"https://jack-davison.github.io/ggopenair/reference/rose_wind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pollution rose variation of the traditional wind rose — rose_wind","text":"data data frame containing fields ws wd ws Name column representing wind speed. wd Name column representing wind direction. ws_int Wind speed interval. Default 2 m/s low met masts low mean wind speeds value 1 0.5 m/s may better. Note, argument superseded pollutionRose. See breaks . angle Angle spokes. Ideally number 360 evenly divisible (see bias_corr). facet One two faceting columns. facet determines data split plotted. facet length 1 passed ggplot2::facet_wrap(), length 2 passed ggplot2::facet_grid() first element used columns second rows. options (e.g., multiple pollutant columns) can limit number faceting columns 1. bias_corr angle divide exactly 360 bias introduced frequencies wind direction already supplied rounded nearest 10 degrees, often case. example, angle = 22.5, N, E, S, W include 3 wind sectors angles two. bias correction can made correct problem. simple method according Applequist (2012) used adjust frequencies. breaks number break points use binning data (used alongside ws_int), vector specific break points. example, breaks = 6 ws_int = 2 generates break points 2, 4, 6 & 8 m/s, whereas breaks = c(0, 1, 10, 100) breaks data four segments: <1, 1-10, 10-100, & >100. normalise TRUE wind direction segment normalised equal one. useful showing concentrations (parameters) contribute wind sector proprtion time wind direction low. line showing probability wind directions particular wind sector also shown. statistic statistic applied data bin plot. Options currently include “prop.count”, “prop.mean” “abs.count”. default “prop.count” sizes bins according proportion frequency measurements.  Similarly, “prop.mean” sizes bins according relative contribution mean. “abs.count” provides absolute count measurements bin. width Width bar fraction maximum width. width = 1 makes bars meet edges width = 0 makes disappear entirely. Defaults 0.9. border_colour Border colour shaded areas. Default border. alpha transparency plot. mainly useful overlay map.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/scale_limitval.html","id":null,"dir":"Reference","previous_headings":"","what":"Position scales for continuous data (x & y) with labelled vertical/horizontal\nmarkers — scale_limitval","title":"Position scales for continuous data (x & y) with labelled vertical/horizontal\nmarkers — scale_limitval","text":"function wrapper around ggplot2::scale_x_continuous() ggplot2::scale_y_continuous() allows users automatically draw labelled horizontal vertical markers specified points. air quality world, may particularly useful display limit values, defined legislation recommended health authorities.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/scale_limitval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Position scales for continuous data (x & y) with labelled vertical/horizontal\nmarkers — scale_limitval","text":"","code":"scale_y_limitval(   marker_values,   marker_colours = \"black\",   marker_labels = marker_values,   marker_linetypes = 2,   trans = \"identity\",   ... )  scale_x_limitval(   marker_values,   marker_colours = \"black\",   marker_labels = marker_values,   marker_linetypes = 2,   trans = \"identity\",   ... )"},{"path":"https://jack-davison.github.io/ggopenair/reference/scale_limitval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Position scales for continuous data (x & y) with labelled vertical/horizontal\nmarkers — scale_limitval","text":"marker_values Numeric vector values draw marker lines. marker_colours Character vector colours marker lines. length marker_values. marker_labels Character vector labels marker lines. length marker_values. Defaults using numeric values given marker_values. marker_linetypes Vector values marker linetypes. length marker_values. Defaults dashed lines (2). trans name transformation object. See ggplot2::scale_x_continuous() information. ... arguments pass ggplot2::scale_x_continuous()/ggplot2::scale_y_continuous().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/scale_limitval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Position scales for continuous data (x & y) with labelled vertical/horizontal\nmarkers — scale_limitval","text":"function uses ggplot2::sec_axis() display line labels. One can therefore pass ggplot2::sec_axis() .... users wish use ggplot2::sec_axis() recommended use ggplot2::geom_abline() draw lines manually. Unlike \"scale\" functions order function added ggplot2::ggplot() object matters. Adding scale_*_limitval() ggplot2::geom_line() draw line markers top trend line, whereas adding draw markers .","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/scale_opencolours_c.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting with openair palettes in ggplot2 — scale_opencolours_c","title":"Plotting with openair palettes in ggplot2 — scale_opencolours_c","text":"convenient wrapper around ggplot2::scale_color_gradientn() openair::openColours() creates colour gradients ggopenair plots, helpful defaults.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/scale_opencolours_c.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting with openair palettes in ggplot2 — scale_opencolours_c","text":"","code":"scale_opencolours_c(   colours = \"default\",   na_value = \"grey50\",   aes = c(\"colour\", \"fill\"),   ... )"},{"path":"https://jack-davison.github.io/ggopenair/reference/scale_opencolours_c.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting with openair palettes in ggplot2 — scale_opencolours_c","text":"colours openair colour scheme use. See openair::openColours() information. na_value aesthetic value use missing (NA) values. Defaults \"grey50\". aes Character string vector character strings listing name(s) aesthetic(s) scale works . default, c(\"colour\", \"fill\"), applies colours colour fill aesthetics. ... arguments pass ggplot2::scale_color_gradientn().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/scale_opencolours_c.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting with openair palettes in ggplot2 — scale_opencolours_c","text":"ggproto object defining continuous colour scale use ggplot2::ggplot().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/scale_opencolours_c.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting with openair palettes in ggplot2 — scale_opencolours_c","text":"","code":"if (FALSE) { polar_plot(mydata, \"nox\") + scale_opencolours() }"},{"path":"https://jack-davison.github.io/ggopenair/reference/theme_polar.html","id":null,"dir":"Reference","previous_headings":"","what":"Default Polar Plot Theme — theme_polar","title":"Default Polar Plot Theme — theme_polar","text":"complete theme attempts recreate styling openair::polarPlot(). alternative using theme, use ggplot2::theme() -built ggplot2 themes.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/theme_polar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default Polar Plot Theme — theme_polar","text":"","code":"theme_polar(   base_size = 11,   base_family = \"\",   base_line_size = base_size/22,   base_rect_size = base_size/22,   panel_ontop = TRUE )"},{"path":"https://jack-davison.github.io/ggopenair/reference/theme_polar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default Polar Plot Theme — theme_polar","text":"base_size base font size, given pts. base_family base font family base_line_size base size line elements base_rect_size base size rect elements panel_ontop Place panel grids top plot geometries? default, TRUE, can make polar plots easier interpret, behaviour may always desired.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/theme_polar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default Polar Plot Theme — theme_polar","text":"ggplot theme object defining use ggplot2::ggplot().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/time_average.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate time averages for data frames — time_average","title":"Function to calculate time averages for data frames — time_average","text":"function similar openair::timeAverage(), responds grouped data frames (dplyr::group_by()).","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/time_average.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate time averages for data frames — time_average","text":"","code":"time_average(   data,   avg_time = \"day\",   data_thresh = 0,   statistic = \"mean\",   ...,   type )"},{"path":"https://jack-davison.github.io/ggopenair/reference/time_average.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate time averages for data frames — time_average","text":"data data frame containing date field. Can class POSIXct Date. avg_time defines time period average . Can “sec”, “min”, “hour”, “day”, “DSTday”, “week”, “month”, “quarter” “year”. much increased flexibility number can precede options followed space. example, timeAverage 2 months period = \"2 month\". addition, avg_time can equal “season”, case 3-month seasonal values calculated spring defined March, April, May . Note avg_time can less time interval original series, case series expanded new time interval. useful, example, calculating 15-minute time series hourly one hourly value repeated new 15-minute period. Note expanding data way necessary ensure time interval original series exact multiple avg_time e.g. hour 10 minutes, day hour. Also, input time series must consistent time gaps successive intervals timeAverage can work much ‘padding’ apply. pad-data way choose fill = TRUE. data_thresh data capture threshold use (%). value zero means available data used particular period regardless number values available. Conversely, value 100 mean data need present average calculated, else recorded NA. See also interval, start.date end.date see whether advisable set options. statistic statistic apply aggregating data; default mean. Can one “mean”, “max”, “min”, “median”, “frequency”, “sum”, “sd”, “percentile”. Note “sd” standard deviation, “frequency” number (frequency) valid records period “data.cap” percentage data capture. “percentile” percentile level (%) 0-100, can set using “percentile” option. ... arguments pass openair::timeAverage(). type used. Please use dplyr::group_by().","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/time_average.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate time averages for data frames — time_average","text":"tibble","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/time_average.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to calculate time averages for data frames — time_average","text":"","code":"if (FALSE) { mydata %>%   dplyr::group_by(season = cut_date(date, \"season\")) %>%   time_average(\"year\") }"},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_calendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot time series values in a conventional calendar format — trend_calendar","title":"Plot time series values in a conventional calendar format — trend_calendar","text":"single year data, trend_calendar() plot data conventional calendar format, .e., month day week. multiple years data, year-month matrix panels instead plotted. Daily statistics calculated using time_average(), default calculate daily mean concentration.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_calendar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot time series values in a conventional calendar format — trend_calendar","text":"","code":"trend_calendar(   data,   pollutant,   statistic = \"mean\",   data_thresh = 0,   border_colour = \"white\",   w_shift = 0 )"},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_calendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot time series values in a conventional calendar format — trend_calendar","text":"data data frame minimally containing date least one numeric variable. date either Date format class POSIXct. pollutant Mandatory. pollutant name corresponding variable data frame supplied e.g. pollutant = \"nox\". statistic Statistic passed time_average(). data_thresh Data capture threshold passed time_average(). example, data_thresh = 75 means least 75\\ available day value calculate, else data removed. border_colour colour use border tile. Defaults \"white\". NA removes border. w_shift Controls order days week. default plot shows Saturday first (w_shift = 0). change starts Monday example, set w_shift = 2, .","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_calendar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot time series values in a conventional calendar format — trend_calendar","text":"trend_calendar() two accompanying annotation functions. annotate_calendar_text() can write either day month average pollutant concentration calendar. annotate_calendar_wd() draw wind speed direction arrows onto calendar, assuming columns labelled \"ws\" \"wd\" present original data. Note possible pre-calculate concentrations way passing data trend_calendar(). example openair::rollingMean() used calculate rolling 8-hour mean concentrations. data can passed trend_calendar() statistic = \"max\" chosen, plot maximum daily 8-hour mean concentrations.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_calendar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot time series values in a conventional calendar format — trend_calendar","text":"","code":"if (FALSE) { marylebone %>%   selectByDate(year = 2019) %>%   trend_calendar(\"nox\") +   annotate_calendar_text(colour = \"white\", size = 5, type = \"date\") +   annotate_calendar_wd(colour = \"black\") }"},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_level.html","id":null,"dir":"Reference","previous_headings":"","what":"Trend Heat Map — trend_level","title":"Trend Heat Map — trend_level","text":"trendLevel function provides way rapidly showing large amount data condensed form. one plot, variation concentration one pollutant can shown function three categorical properties. default version plot uses y = hour day, x = month year type = year provide information trends, seasonal effects diurnal variations. However, x, y type summarising statistics can modified provide range similar plots.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_level.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trend Heat Map — trend_level","text":"","code":"trend_level(   data,   pollutant,   x,   y,   facet = NULL,   statistic = c(\"mean\", \"max\", \"frequency\"),   stat_args = NULL,   stat_safemode = TRUE )"},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_level.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trend Heat Map — trend_level","text":"data openair data frame use generate trendLevel plot. pollutant column name identifying pollutant concentration. x, y, facet name data series bin mydata. x y form x y axes resulting plot, facet optionally used separate plot separate panels. Duplication x, y facet permitted. representative column names, three arguments passed openair::cutData(). statistic statistic method use summarise locally binned pollutant measurements . Three options currently encoded: “mean” (default), “max” “frequency”. (Note: Functions can also sent directly via statistic.  However, option still development used caution. See Details .) stat_args Additional options used statistic function. extra options supplied list named parameters. (see Details .) stat_safemode addition protection applied using functions direclty statistic users can ignore. option returns NA instead running statistic binned subsamples empty. Many common functions terminate error message applied empty dataset. , option provides mechanism work functions. cases, e.g. function counted missing entries, might need set FALSE (see Details .)","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_level.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trend Heat Map — trend_level","text":"ggplot2::ggplot2 figure","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_level.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trend Heat Map — trend_level","text":"trendLevel allows use third party summarising functions via statistic option. additional function arguments included within function called using statistic supplied list named parameters sent using stat.args. example, encoded option statistic = \"mean\" equivalent statistic = mean, stat.args = list(na.rm = TRUE) R command mean(x, na.rm= TRUE). Many R functions user's code applied similar fashion, subject following restrictions: first argument sent function must data series analysed; name `x' used extra options supplied stat.args; function return required answer numeric NA. Note: supplied function returns one answer, currently first retained used trendLevel. returned information ignored without warning. function terminates error sent empty data series, option stat.safe.mode set FALSE trendLevel may fail. Note: stat.safe.mode = TRUE option returns NA without warning empty data series.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_prop.html","id":null,"dir":"Reference","previous_headings":"","what":"Time series plot with categories shown as a stacked bar chart — trend_prop","title":"Time series plot with categories shown as a stacked bar chart — trend_prop","text":"function shows time series plots stacked bar charts. different categories bar chart made character factor variable data frame. function primarily developed support plotting cluster analysis output polar_cluster() openair::trajCluster() consider local regional (back trajectory) cluster analysis respectively. However, function general use understanding time series data.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_prop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time series plot with categories shown as a stacked bar chart — trend_prop","text":"","code":"trend_prop(   data,   pollutant,   proportion,   avg_time = \"month\",   facet = \"default\",   normalise = FALSE )"},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_prop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time series plot with categories shown as a stacked bar chart — trend_prop","text":"data data frame containing fields date, pollutant splitting variable proportion pollutant Name pollutant plot contained mydata. proportion splitting variable makes bars bar chart e.g. proportion = \"cluster\" output polarCluster analysed. proportion numeric variable split 4 quantiles (default) cutData. proportion factor character variable categories used directly. avg_time defines time period average . Can “sec”, “min”, “hour”, “day”, “DSTday”, “week”, “month”, “quarter” “year”. much increased flexibility number can precede options followed space. example, timeAverage 2 months period = \"2   month\". Note avg_time used timeProp greater time gap original data. example, avg_time =   \"day\" hourly data OK, avg_time = \"hour\" daily data . facet facet determines data split .e. conditioned, plotted. default produce single plot using entire data. Type can one built-types detailed cutData e.g. \"season\", \"year\", \"weekday\" . example, facet = \"season\" produce four plots --- one season. also possible choose facet another variable data frame. variable numeric, data split four quantiles (possible) labelled accordingly. facet existing character factor variable, categories/levels used directly. offers great flexibility understanding variation different variables depend one another. facet must length one. normalise normalise = TRUE time interval scaled 100. helpful show relative (percentage) contribution proportions.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_prop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time series plot with categories shown as a stacked bar chart — trend_prop","text":"ggplot2::ggplot2 figure","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_prop.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Time series plot with categories shown as a stacked bar chart — trend_prop","text":"order plot time series way, sort time aggregation needed, controlled option avg_time. plot shows value pollutant y-axis (averaged according avg_time). time intervals made bars split according proportion. bars therefore show total value pollutant made time interval.","code":""},{"path":[]},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_variation.html","id":null,"dir":"Reference","previous_headings":"","what":"Diurnal, day of the week and monthly variation — trend_variation","title":"Diurnal, day of the week and monthly variation — trend_variation","text":"Plots diurnal, day week monthly variation different variables, typically pollutant concentrations. Four separate plots produced.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_variation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diurnal, day of the week and monthly variation — trend_variation","text":"","code":"trend_variation(   mydata,   pollutant = \"nox\",   local_tz = NULL,   normalise = FALSE,   type = \"default\",   group = NULL,   difference = FALSE,   statistic = \"mean\",   conf_int = 0.95,   b = 100,   ci = TRUE,   alpha = 0.3,   return = \"ensemble\" )"},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_variation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diurnal, day of the week and monthly variation — trend_variation","text":"mydata data frame hourly (higher temporal resolution data). Must include date field least one variable plot. pollutant Name variable plot. Two pollutants can plotted, case form like pollutant = c(\"nox\", \"co\") used. local_tz results calculated local time includes treatment daylight savings time (DST)? default consider DST issues, provided data imported without DST offset. Emissions activity tends occur local time e.g. rush hour 8 every day. clocks go forward spring, emissions effectively released atmosphere typically 1 hour earlier summertime .e. DST applies. plotting diurnal profiles, effect “smearing-” concentrations. Sometimes, useful approach express time local time. correction tends produce better-defined diurnal profiles concentration (variables) allows better comparison made emissions/activity data. set FALSE GMT used. Examples usage include local.tz   = \"Europe/London\", local.tz = \"America/New_York\". See cutData import details. normalise variables normalised? default FALSE. TRUE variable(s) divided mean values. helps compare shape diurnal trends variables different scales. type type determines data split .e. conditioned, plotted. default produce single plot using entire data. Type can one built-types detailed cutData e.g. “season”, “year”, “weekday” . example, type = \"season\" produce four plots --- one season. also possible choose type another variable data frame. variable numeric, data split four quantiles (possible) labelled accordingly. type existing character factor variable, categories/levels used directly. offers great flexibility understanding variation different variables depend one another. one type allowed intimeVariation. group sets grouping variable used. example, data frame column site setting group = \"site\" plot sites together panel. See examples . difference two pollutants chosen setting difference   = TRUE also plot difference means two variables pollutant[2] - pollutant[1]. Bootstrap 95\\ difference means also calculated. horizontal dashed line shown y = 0. difference can also calculated column identifies two groups e.g. used splitByDate. case possible call timeVariation option group = \"split.\" difference = TRUE. statistic Can “mean” (default) “median”. statistic ‘mean’ mean line 95\\ interval mean plotted default. statistic ‘median’ median line plotted together 5/95 25/75th quantiles plotted. Users can control confidence intervals conf.int. conf_int confidence intervals plotted. statistic =   \"mean\" confidence intervals mean plotted. statistic = \"median\" conf.int 1 -   conf.int quantiles plotted. conf.int can length 2, useful showing quantiles. example conf.int =   c(0.75, 0.99) yield plot showing median, 25/75 5/95th quantiles. b Number bootstrap replicates use. Can useful reduce value large number observations available increase speed calculations without affecting 95\\ interval calculations much. ci confidence intervals shown? default TRUE. Setting FALSE can useful multiple pollutants chosen -lapping confidence intervals can complicate plots. alpha alpha transparency used plotting confidence intervals. 0 fully transparent 1 opaque. default 0.4 return function return? One : * \"ensemble\" --- four time variation panels assembled patchwork object (default). * \"day_hour\", \"day\", \"hour\", \"month\" --- single time variation panel. * \"list\" --- list four time variation panels, may useful users wish assemble different way plots entirely. * \"data\" --- raw data used create time variation panels.","code":""},{"path":"https://jack-davison.github.io/ggopenair/reference/trend_variation.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diurnal, day of the week and monthly variation — trend_variation","text":"variation pollutant concentrations hour day day week, etc., can reveal many interesting features relate source types meteorology. traffic sources, often important differences way vehicles vary vehicles type, e.g., less heavy vehicles weekends. plots also show 95\\ confidence intervals mean calculated bootstrap simulations, provide robust estimates confidence intervals (particularly relatively data). function can handle multiple pollutants uses flexible type option provide separate panels 'type' --- see cutData details. can also accept group option useful data stacked. work similar way multiple pollutants separate columns. option difference calculate difference means two pollutants together bootstrap estimates 95\\ difference mean. works two ways: either two pollutants supplied separate columns, e.g., pollutant = c(\"no2\", \"o3\") two unique values group. difference calculated second pollutant minus first labelled . Considering differences way can provide many useful insights particularly useful model evaluation information needed model differs observations many different time scales. manual contains various examples using difference = TRUE. Note also timeVariation function works well subset data conjunction plots. example, polarPlot may highlight interesting feature particular wind speed/direction range. filtering conditions timeVariation can help determine whether temporal variation feature differs features --- help source identification. addition, timeVariation work well variables available. Examples include meteorological traffic flow data. Depending choice statistic, subheading added. Users can control text subheading use sub e.g. sub = \"\" remove subheading.","code":""},{"path":[]}]
